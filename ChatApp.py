{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNmRjRakZLbEdYoldXoues9",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/avanthika1302/GeminiHackathon/blob/main/ChatApp.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0lHYeIMg2djr"
      },
      "outputs": [],
      "source": [
        "import streamlit as st\n",
        "from PIL import Image\n",
        "import io\n",
        "import base64\n",
        "import requests\n",
        "import sqlite3\n",
        "import os\n",
        "\n",
        "# ---- Config ----\n",
        "SERPER_API_KEY = os.getenv(\"SERPER_API_KEY\")\n",
        "DB_PATH = \"photo_assistant.db\"\n",
        "\n",
        "# ---- SQLite Setup ----\n",
        "conn = sqlite3.connect(DB_PATH)\n",
        "c = conn.cursor()\n",
        "c.execute(\"\"\"\n",
        "CREATE TABLE IF NOT EXISTS user_images (\n",
        "    id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
        "    name TEXT,\n",
        "    email TEXT,\n",
        "    image_desc TEXT,\n",
        "    tags TEXT,\n",
        "    location TEXT,\n",
        "    suggestions TEXT\n",
        ")\n",
        "\"\"\")\n",
        "conn.commit()\n",
        "\n",
        "# ---- Streamlit App Setup ----\n",
        "st.set_page_config(page_title=\"Photo Assistant Chatbot\", layout=\"centered\")\n",
        "st.title(\"Photo Assistant Chatbot\")\n",
        "\n",
        "# ---- Sidebar Mode ----\n",
        "mode = st.sidebar.radio(\"Choose Mode\", [\"Chatbot Assistant\", \"View History & Search\"])\n",
        "\n",
        "# ---- Session State Initialization ----\n",
        "if \"user_info\" not in st.session_state:\n",
        "    st.session_state.user_info = {}\n",
        "if \"step\" not in st.session_state:\n",
        "    st.session_state.step = 1\n",
        "if \"image_desc\" not in st.session_state:\n",
        "    st.session_state.image_desc = \"\"\n",
        "if \"tags\" not in st.session_state:\n",
        "    st.session_state.tags = []\n",
        "if \"image_data\" not in st.session_state:\n",
        "    st.session_state.image_data = None\n",
        "\n",
        "\n",
        "# ---- Mode 1: Chatbot Assistant ----\n",
        "if mode == \"Chatbot Assistant\":\n",
        "\n",
        "    if st.session_state.step == 1:\n",
        "        with st.form(\"user_form\"):\n",
        "            name = st.text_input(\"What is your name?\")\n",
        "            email = st.text_input(\"Enter your email\")\n",
        "            submitted = st.form_submit_button(\"Next\")\n",
        "            if submitted:\n",
        "                if name and email:\n",
        "                    st.session_state.user_info = {\"name\": name, \"email\": email}\n",
        "                    st.session_state.step = 2\n",
        "                else:\n",
        "                    st.error(\"Please provide both name and email.\")\n",
        "\n",
        "    if st.session_state.step == 2:\n",
        "        st.success(f\"Welcome, {st.session_state.user_info['name']}!\")\n",
        "        st.markdown(\"**Please upload an image you'd like me to describe and find similar inspiration for.**\")\n",
        "        uploaded_file = st.file_uploader(\"Upload your image\", type=[\"jpg\", \"jpeg\", \"png\"])\n",
        "\n",
        "        if uploaded_file:\n",
        "            image = Image.open(uploaded_file)\n",
        "            st.image(image, caption=\"Uploaded Image\", use_column_width=True)\n",
        "            st.session_state.image_data = uploaded_file.getvalue()\n",
        "            st.session_state.step = 3\n",
        "\n",
        "    # --- Step 3: Image Description ---\n",
        "    def mock_describe_image(image_bytes):\n",
        "        return \"A scenic photo of tulips in a bright garden during golden hour\", [\"tulips\", \"garden\", \"golden hour\", \"flowers\", \"sunlight\"]\n",
        "\n",
        "    def describe_image(image_bytes):\n",
        "        return mock_describe_image(image_bytes)\n",
        "\n",
        "    if st.session_state.step == 3 and st.session_state.image_data:\n",
        "        desc, tags = describe_image(st.session_state.image_data)\n",
        "        st.session_state.image_desc = desc\n",
        "        st.session_state.tags = tags\n",
        "        st.success(\"Here's a description of your image:\")\n",
        "        st.info(desc)\n",
        "        st.markdown(\"**Tags identified:** \" + \", \".join(tags))\n",
        "        st.session_state.step = 4\n",
        "\n",
        "    # --- Step 4: Location Input ---\n",
        "    if st.session_state.step == 4:\n",
        "        location = st.text_input(\"Enter your city or location to find nearby photo spots\")\n",
        "\n",
        "        if location:\n",
        "            st.session_state.user_location = location\n",
        "            st.session_state.step = 5\n",
        "\n",
        "    # --- Step 5: Serper Search ---\n",
        "    def search_similar_places(tags, location):\n",
        "        query = f\"photography spots with {', '.join(tags)} in {location}\"\n",
        "        headers = {\n",
        "            \"X-API-KEY\": SERPER_API_KEY,\n",
        "            \"Content-Type\": \"application/json\"\n",
        "        }\n",
        "        payload = {\"q\": query, \"gl\": \"us\"}\n",
        "\n",
        "        try:\n",
        "            response = requests.post(\"https://google.serper.dev/search\", headers=headers, json=payload)\n",
        "            response.raise_for_status()\n",
        "            results = response.json()\n",
        "            suggestions = []\n",
        "            if \"organic\" in results:\n",
        "                for result in results[\"organic\"][:5]:\n",
        "                    suggestions.append(result[\"title\"] + \" - \" + result.get(\"link\", \"\"))\n",
        "            return suggestions if suggestions else [\"No good matches found.\"]\n",
        "        except Exception as e:\n",
        "            return [f\"Error: {str(e)}\"]\n",
        "\n",
        "    # --- Step 6: Results + Store in DB ---\n",
        "    if st.session_state.step == 5:\n",
        "        st.markdown(\"Searching for nearby photography spots...\")\n",
        "\n",
        "        suggestions = search_similar_places(st.session_state.tags, st.session_state.user_location)\n",
        "\n",
        "        st.success(\"Here are some photography spots near you:\")\n",
        "        for i, s in enumerate(suggestions, 1):\n",
        "            st.markdown(f\"{i}. {s}\")\n",
        "\n",
        "        # Save to SQLite\n",
        "        c.execute(\"\"\"\n",
        "            INSERT INTO user_images (name, email, image_desc, tags, location, suggestions)\n",
        "            VALUES (?, ?, ?, ?, ?, ?)\n",
        "        \"\"\", (\n",
        "            st.session_state.user_info[\"name\"],\n",
        "            st.session_state.user_info[\"email\"],\n",
        "            st.session_state.image_desc,\n",
        "            \",\".join(st.session_state.tags),\n",
        "            st.session_state.user_location,\n",
        "            \"|\".join(suggestions)\n",
        "        ))\n",
        "        conn.commit()\n",
        "\n",
        "        st.markdown(\"---\")\n",
        "        st.success(\"Saved to your history. You can start again or switch to the 'View History' tab.\")\n",
        "\n",
        "        if st.button(\"Start Over\"):\n",
        "            st.session_state.step = 1\n",
        "\n",
        "\n",
        "# ---- Mode 2: View History & Search ----\n",
        "elif mode == \"View History & Search\":\n",
        "    st.subheader(\"Search Through Your Past Uploads\")\n",
        "\n",
        "    search_term = st.text_input(\"Search by tag, description, or location (e.g., 'tulips', 'sunset', 'Seattle')\")\n",
        "\n",
        "    query = \"SELECT name, email, image_desc, tags, location, suggestions FROM user_images\"\n",
        "    if search_term:\n",
        "        query += f\"\"\" WHERE\n",
        "        image_desc LIKE '%{search_term}%' OR\n",
        "        tags LIKE '%{search_term}%' OR\n",
        "        location LIKE '%{search_term}%'\"\"\"\n",
        "\n",
        "    rows = c.execute(query).fetchall()\n",
        "\n",
        "    if rows:\n",
        "        for row in rows:\n",
        "            name, email, desc, tags, location, suggestions = row\n",
        "            st.markdown(f\"**Name:** {name}  \\n**Email:** {email}  \\n**Location:** {location}\")\n",
        "            st.markdown(f\"**Description:** {desc}\")\n",
        "            st.markdown(f\"**Tags:** {tags}\")\n",
        "            st.markdown(\"**Suggestions:**\")\n",
        "            for s in suggestions.split(\"|\"):\n",
        "                st.markdown(f\"- {s}\")\n",
        "            st.markdown(\"---\")\n",
        "    else:\n",
        "        st.info(\"No matches found. Try another keyword.\")"
      ]
    }
  ]
}