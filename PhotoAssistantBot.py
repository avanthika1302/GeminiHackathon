{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMPFoSidJB+CVwBNnUJACRt",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/avanthika1302/GeminiHackathon/blob/main/PhotoAssistantBot.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "import time, io\n",
        "from helper import generate_description, clean_json, insert_image_metadata, search_similar_places, answer_question_from_json\n",
        "import toml\n",
        "\n",
        "# --- Session state init ---\n",
        "if \"messages\" not in st.session_state:\n",
        "    st.session_state.messages = []\n",
        "if \"user_info\" not in st.session_state:\n",
        "    st.session_state.user_info = {}\n",
        "if \"user_history\" not in st.session_state:\n",
        "    st.session_state.user_history = []\n",
        "if \"last_image\" not in st.session_state:\n",
        "    st.session_state.last_image = None\n",
        "if \"last_ModelOP\" not in st.session_state:\n",
        "    st.session_state.last_ModelOP = None\n",
        "if \"show_upload\" not in st.session_state:\n",
        "    st.session_state.show_upload = True\n",
        "\n",
        "# Sidebar user session management\n",
        "st.sidebar.title(\"User Session\")\n",
        "\n",
        "if st.sidebar.button(\"Reset Session\"):\n",
        "    st.session_state.clear()\n",
        "    st.rerun()\n",
        "\n",
        "\n",
        "# Get user info\n",
        "if not st.session_state.user_info:\n",
        "    st.title(\"üì∏ Smart Photography Assistant\")\n",
        "    st.subheader(\"Tell us about you to get started\")\n",
        "    name = st.text_input(\"Your Name\", key=\"name_input\")\n",
        "    email = st.text_input(\"Your Email\", key=\"email_input\")\n",
        "    location = st.text_input(\"Location of interest\", key=\"loc_input\")\n",
        "\n",
        "    if st.button(\"Start Session\"):\n",
        "        if name and email and location:\n",
        "            #st.chat_message(\"Welcome \" + name )\n",
        "            st.session_state.user_info = {\n",
        "                \"name\": name,\n",
        "                \"email\": email,\n",
        "                \"location\": location\n",
        "            }\n",
        "            st.rerun()\n",
        "        else:\n",
        "            st.warning(\"Please fill in all fields.\")\n",
        "    st.stop()\n",
        "\n",
        "# --- Main Chat UI ---\n",
        "# Display chat history\n",
        "\n",
        "st.title(\"üì∏ Smart Photography Assistant\")\n",
        "st.subheader(\"Welcome \" + st.session_state.user_info[\"name\"]+\"!\")\n",
        "st.markdown(\"Hi! I'm your Photo Assistant ü§ñ. Here's what I can do:\")\n",
        "st.markdown(\"\"\"\n",
        "                - üìù Describe an uploaded photo\n",
        "                - üì∏ Social media captions and tags\n",
        "                - Ideal weather for a perfect picture\n",
        "                - üîÅ Show similar images\n",
        "                - üìç Suggest nearby photo spots\n",
        "                - üîÑ Clear all and start over\n",
        "                Just type your option and I'll help!\n",
        "                \"\"\")\n",
        "\n",
        "for msg in st.session_state.messages:\n",
        "    with st.chat_message(msg[\"role\"]):\n",
        "        st.markdown(msg[\"content\"])\n",
        "\n",
        "# Handle new user message\n",
        "uploaded_file = None\n",
        "\n",
        "if st.session_state.show_upload:\n",
        "    uploaded_file = st.file_uploader(\"Upload a photo to proceed\", type=[\"jpg\", \"jpeg\", \"png\"], key=\"file_uploader\")\n",
        "\n",
        "    if uploaded_file:\n",
        "        st.session_state.last_image = uploaded_file.read()\n",
        "        st.info(\"Uploading and analyzing your photo...\")\n",
        "        with st.spinner(\"Working on uploading...\"):\n",
        "            time.sleep(10)  # simulate processing\n",
        "\n",
        "        ModelOP = generate_description(st.session_state.last_image, st.session_state.user_info[\"location\"]).text\n",
        "        insights = clean_json(ModelOP)\n",
        "\n",
        "        #Place holder for uploading an image\n",
        "        st.session_state.last_ModelOP = insights\n",
        "        st.session_state.messages.append({\n",
        "            \"role\": \"assistant\",\n",
        "            \"content\": \"Thanks for uploading!\"\n",
        "        })\n",
        "        st.session_state.show_upload = False\n",
        "\n",
        "if st.session_state.last_image != None:\n",
        "    st.image(io.BytesIO(st.session_state.last_image), caption=\"Your uploaded image\", use_container_width=True)#response = \"Upload feature enabled! Please upload your photo now.\"\n",
        "\n",
        "\n",
        "user_input = st.chat_input(\"What would you like to do?\", key=\"chat_box\")\n",
        "\n",
        "if user_input is not None and st.session_state.last_ModelOP is not None:\n",
        "    with st.spinner(\"Model responding...\"):\n",
        "        # simulate delay or processing\n",
        "        time.sleep(5)\n",
        "\n",
        "    st.session_state.messages.append({\"role\": \"user\", \"content\": user_input})\n",
        "\n",
        "    # Handle commands\n",
        "    cmd = user_input.lower()\n",
        "    response = \"\"\n",
        "\n",
        "    if \"start\" in cmd or \"reset\" in cmd:\n",
        "        st.session_state.clear()\n",
        "        st.rerun()\n",
        "    elif \"similar\" in cmd:\n",
        "        response = \"Here are some similar photo's I found...\"\n",
        "\n",
        "        urls = search_similar_places(st.session_state.last_ModelOP,st.session_state.user_info[\"location\"])\n",
        "        for url in urls:\n",
        "          st.image(url['Imageurl'], caption=\"Your uploaded image\", use_container_width=True)\n",
        "    elif \"upload\" in cmd:\n",
        "        response = \"Upload a pic...\"\n",
        "        st.session_state.show_upload = True\n",
        "    else:\n",
        "        #st.session_state.show_upload = True\n",
        "        response = \"response from model\"\n",
        "\n",
        "    st.session_state.messages.append({\"role\": \"assistant\", \"content\": response})\n",
        "    st.rerun()  # Only needed once at the end to reflect both messages"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 108
        },
        "id": "XkhUg55KQRxQ",
        "outputId": "8a3d0135-17b5-4f95-f331-a05d15ef5dc0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (<ipython-input-1-6ce57769dd50>, line 11)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-6ce57769dd50>\"\u001b[0;36m, line \u001b[0;32m11\u001b[0m\n\u001b[0;31m    from helper import\u001b[0m\n\u001b[0m                       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    }
  ]
}